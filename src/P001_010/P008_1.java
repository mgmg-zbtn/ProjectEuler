package P001_010;

/**
 * 
 * 以下の1000桁の数字から13個の連続する数字を取り出して その積を計算する. そのような積の中で最大のものの値はいくらか.
 * Note:この問題は最近更新されました. お使いのパラメータが正しいかどうか確認してください.（5個→13個)
 * 
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * 
 * EX 6桁の数123789なら, 1*2*3*7*8と2*3*7*8*9の二通りとなり, 後者の2*3*7*8*9＝3024が最大の積となる.
 * 
 * A.23514624000
 * 
 * intで13桁だと2091059712までなのでlongが必要
 * 
 * 
 */
public class P008_1 {

	public static void main(String[] args) {
		String[] list = {
				"73167176531330624919225119674426574742355349194934",
				"96983520312774506326239578318016984801869478851843",
				"85861560789112949495459501737958331952853208805511",
				"12540698747158523863050715693290963295227443043557",
				"66896648950445244523161731856403098711121722383113",
				"62229893423380308135336276614282806444486645238749",
				"30358907296290491560440772390713810515859307960866",
				"70172427121883998797908792274921901699720888093776",
				"65727333001053367881220235421809751254540594752243",
				"52584907711670556013604839586446706324415722155397",
				"53697817977846174064955149290862569321978468622482",
				"83972241375657056057490261407972968652414535100474",
				"82166370484403199890008895243450658541227588666881",
				"16427171479924442928230863465674813919123162824586",
				"17866458359124566529476545682848912883142607690042",
				"24219022671055626321111109370544217506941658960408",
				"07198403850962455444362981230987879927244284909188",
				"84580156166097919133875499200524063689912560717606",
				"05886116467109405077541002256983155200055935729725",
				"71636269561882670428252483600823257530420752963450",
		};

//		String[] list = {
//				"123789"
//		};
		
		int N = list.length * list[0].length(); // 1000
		char[] num = new char[N];
		for (int i = 0; i < list.length; i++) {
			for (int j = 0; j < list[0].length(); j++) {
				num[i * list[0].length() + j] = list[i].charAt(j);
			}
		}
		
		int digit = 13;
		long ans = 0;
		for (int n = 0; n < num.length - digit + 1; n++) {
			long temp = 1;
			for (int c = n; c < n + digit; c++) {
				int m = (int) num[c] - 48;
				if (0 < m) {
					temp *= m;
				} else {
					break;
				}
			}
			if (ans < temp) {
				ans = temp;
			}
		}
		System.out.println(ans);
	}
}
